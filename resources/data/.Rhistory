Sys.time()
Sys.timezone()
format(Sys.time(), "%a %b %d %X %Y")
format(Sys.time(), "%a %b %d %x %Y")
format(Sys.time(), "%X")
format(Sys.time(), "%H")
format(Sys.time(), "%H:%M:%S")
format(Sys.time(), "%y-%m-%d %H:%M:%S")
format(Sys.time(), "%Y-%m-%d %H:%M:%S")
cat(format(Sys.time(), "%Y-%m-%d %H:%M:%S")+" a")
cat(format(Sys.time(), "%Y-%m-%d %H:%M:%S"), "a")
cat(format(Sys.time(), "%Y-%m-%d %H:%M:%S"), "\t")
cat(format(Sys.time(), "%Y-%m-%d %H:%M:%S"), "\ta")
cat(format(Sys.time(), "%Y-%m-%d %H:%M:%S"), "\tPreparing data\n")
# Recoding genotype values
cat("--", format(Sys.time(), "%Y-%m-%d %H:%M:%S"), "\tRecoding genotype values\n")
ori.size <- 2
# Summary
cat("Size of genotype matrix before pre-processing: ", ori.size,"\n")
# Summary
cat("Size of genotype matrix before pre-processing:", ori.size, "\n")
Sys.getenv()
R.lib.loc <- "C:/Users/lenovo/Documents/R/win-library/3.3"
library("scrime", lib.loc = R.lib.loc)
require(foreach, quietly = TRUE, lib.loc = R.lib.loc)
detach("package:foreach", unload=TRUE)
# Start the process
library("kernlab", lib.loc = R.lib.loc)
library("randomForest", lib.loc = R.lib.loc)
library("gtools", lib.loc = R.lib.loc)
Sys.info
Sys.info()
Sys.info()['sysname']
Sys.info()["sysname"]
.Platform
.Platform$OS.type
tolower("WindowS")
Sys.getenv()
Sys.getenv("R_LIBS_USER")
setwd("C:/Users/",Sys.info()['user'])
setwd("C:/Users/%Sys.info()['user']%")
dirname(parent.frame(2)$ofile)
dirname()
R.lib.loc <- Sys.getenv("R_LIBS_USER")
R.lib.loc
library("doParallel", lib.loc="~/R/win-library/3.3")
detach("package:doParallel", unload=TRUE)
detach("package:foreach", unload=TRUE)
library("doParallel", lib.loc="~/R/win-library/3.3")
detach("package:doParallel", unload=TRUE)
detach("package:foreach", unload=TRUE)
detach("package:iterators", unload=TRUE)
# suppressWarnings(library("doParallel", lib.loc = R.lib.loc))
require("foreach")
n.core <- parallel::detectCores()
source('~/SrdoFiles/spacio-project/resources/codes/dani.R', echo=TRUE)
debugSource('~/SrdoFiles/spacio-project/resources/codes/dani.R', echo=TRUE)
View(phenotype)
a <- as.vector(data.pheno)
a
View(data.pheno)
View(data.geno)
debugSource('~/SrdoFiles/spacio-project/resources/codes/dani.R', echo=TRUE)
debugSource('~/SrdoFiles/spacio-project/resources/codes/dani.R', echo=TRUE)
source('C:/Users/lenovo/Downloads/Documents/[Penelitian Dani]/Kode program/ThesisSNPSelection_v4.R', echo=TRUE)
##################################################################
#                  RICE SNP DATA PRE-PROCESSING                  #
#                    Dani Setiawan G651150281                    #
##################################################################
# Missing symbol replacement
toNA <- function(data, missing.symbol,
type.col.id, geno.col.id, pheno.col.id){
if(!is.data.frame(data)) data <- as.data.frame(data)
type <- data[,type.col.id]
phenotype <- data[,pheno.col.id]
genotype <- as.matrix(data)[,geno.col.id]
genotype[which(genotype == missing.symbol)] <- NA
return(list(type = type, phenotype = phenotype,
genotype = as.data.frame(genotype)))
}
##################################################################
# Missing call filter
mc.filter <- function(genotype, col.mcr, row.mcr){
if(col.mcr < 0 | row.mcr < 0 | 1 < col.mcr | 1 < row.mcr)
stop(message("Missing call rate must be [0, 1]!"))
geno.dim <- dim(genotype)
removed.cols <- vector("numeric")
for(col in 1:geno.dim[2]){
n.NA <- sum(is.na(genotype[,col]))
if((col.mcr < 1 & n.NA/geno.dim[1] > col.mcr) |
(col.mcr == 1 & n.NA/geno.dim[1] == col.mcr))
removed.cols <- c(removed.cols, col)
}
if(length(removed.cols != 0)){
genotype <- genotype[,-removed.cols]
geno.dim <- dim(genotype)
}
else removed.cols <- NULL
removed.rows <- vector("numeric")
for(row in 1:geno.dim[1]){
n.NA <- sum(is.na(genotype[row,]))
if((row.mcr < 1 & n.NA/geno.dim[2] > row.mcr) |
(row.mcr == 1 & n.NA/geno.dim[2] == row.mcr))
removed.rows <- c(removed.rows, row)
}
if(length(removed.rows != 0))
genotype <- genotype[-removed.rows,]
else removed.rows <- NULL
return(list(genotype = genotype, removed.rows = removed.rows,
removed.cols = removed.cols))
}
##################################################################
cat("Uploading data.\n")
setwd("C:/Users/lenovo/Downloads/Documents/[Penelitian Dani]/Data")
padi <- read.csv("dataFull.csv", header = FALSE, sep = ",")
position <- read.csv("posisi.csv", header = TRUE, sep = ",")
SNP.col <- paste('SNP', 1:1536, sep = "")
pheno.col <- paste('Pheno', 1:12, sep = "")
colnames(padi) <- c('Type', SNP.col, pheno.col)
cat("Changing missing symbol to NA.\n")
padi.ms <- toNA(padi, "--", 1, 2:1537, 1538:1549)
padi.type <- padi.ms$type
padi.geno <- padi.ms$genotype
padi.pheno <- padi.ms$phenotype
cat("Arranging SNPs based on position.\n")
padi.geno <- cbind(position, t(padi.geno))
padi.geno <- padi.geno[order(padi.geno[,1], padi.geno[,2]),]
padi.geno <- t(padi.geno[,3:ncol(padi.geno)])
ori.size <- dim(padi.geno)
cat("Removing poor quality SNPs and samples.\n")
col.mcr <- 0.05 # Removing poor quality SNPs first.
row.mcr <- 0.05 # Followed by removing poor quality samples.
padi.mcr <- mc.filter(padi.geno, col.mcr, row.mcr)
padi.geno <- padi.mcr$genotype
if(!is.null(padi.mcr$removed.rows)){
padi.pheno <- padi.pheno[-padi.mcr$removed.rows,]
padi.type <- padi.type[-padi.mcr$removed.rows]
}
mcr.size <- dim(padi.geno)
cat("Recoding SNPs.\n")
padi.geno <- scrime::recodeSNPs(padi.geno, snp.in.col = TRUE)
cat("Removing monomorphic SNPs.\n")
padi.mono <- scrime::identifyMonomorphism(t(padi.geno))
if(length(padi.mono) != 0)
padi.geno <- padi.geno[,-padi.mono]
poly.size <- dim(padi.geno)
cat("Removing SNPs with low MAFs.\n")
padi.maf <- scrime::rowMAFs(t(padi.geno))
maf <- 0.01 # SNPs with MAFs below this threshold are removed.
low.maf <- which(padi.maf < maf)
if(length(low.maf != 0))
padi.geno <- padi.geno[,-low.maf]
maf.size <- dim(padi.geno)
#cat("Checking Hardy-Weinberg equilibrium.\n")
#padi.hwe <- scrime::rowHWEs(t(padi.geno))
#rawp <- 1e-3 # SNPs with p-values below this threshold are removed.
#padi.hwd <- which(padi.hwe$rawp < rawp)
#if(length(padi.hwd) != 0)
#  padi.geno <- padi.geno[,-padi.hwd]
#hwe.size <- dim(padi.geno)
cat("Imputing missing values using k nearest observations.\n")
padi.geno <- scrime::knncatimpute(padi.geno, "cohen", nn = 120)
cat("Size of genotype matrix before pre-processing:\n")
ori.size
cat("Size of genotype matrix after call rate filter:\n")
mcr.size
cat("Size of genotype matrix after monomorphic filter:\n")
poly.size
cat("Size of genotype matrix after MAF filter:\n")
maf.size
#cat("Size of genotype matrix after HWE filter:\n")
#hwe.size
##################################################################
select.padi <- select(padi.geno, padi.pheno[,1],
set.mtry = "complete")
padi.pheno[,1]
source('~/SrdoFiles/spacio-project/resources/codes/dani.R', echo=TRUE)
data.pheno
data.pheno <- as.numeric(data.pheno)
selection <- select(data.geno, data.pheno, set.mtry = "complete")
