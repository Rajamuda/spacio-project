if(!is.null(data.mcr$removed.rows)){
data.pheno <- data.pheno[-data.mcr$removed.rows]
data.type <- data.type[-data.mcr$removed.rows]
}
mcr.size <- dim(data.geno)
# Recoding genotype values
data.geno <- scrime::recodeSNPs(data.geno, snp.in.col = TRUE)
data.coba <- as.data.frame(data.geno)
View(data.geno)
nama <- names(data.geno)
data.coba <- as.data.frame(data.geno)
nama <- names(data.coba)
data.coba[,nama] <- lapply(data.coba[,nama],factor)
View(data.coba)
##################################################################
#        SNP Selection using Random Forest, SFFS, and SVR        #
#                    Dani Setiawan G651150281                    #
##################################################################
# Please install the following packages before running this code!
# scrime, kernlab, randomForest, doParallel, gtools
##################################################################
# Missing symbol replacement
toNA <- function(data, missing.symbol,
type.col.id, geno.col.id, pheno.col.id){
if(!is.data.frame(data)) data <- as.data.frame(data)
type <- data[,type.col.id]
phenotype <- data[,pheno.col.id]
genotype <- as.matrix(data)[,geno.col.id]
genotype[which(genotype == missing.symbol)] <- NA
return(list(type = type, phenotype = phenotype,
genotype = as.data.frame(genotype)))
}
##################################################################
# Missing call filter
mc.filter <- function(genotype, col.mcr, row.mcr){
if(col.mcr < 0 | row.mcr < 0 | 1 < col.mcr | 1 < row.mcr)
stop(message("Missing call rate must be [0, 1]!"))
geno.dim <- dim(genotype)
removed.cols <- vector("numeric")
for(col in 1:geno.dim[2]){
n.NA <- sum(is.na(genotype[,col]))
if((col.mcr < 1 & n.NA/geno.dim[1] > col.mcr) |
(col.mcr == 1 & n.NA/geno.dim[1] == col.mcr))
removed.cols <- c(removed.cols, col)
}
if(length(removed.cols != 0)){
genotype <- genotype[,-removed.cols]
geno.dim <- dim(genotype)
}
else removed.cols <- NULL
removed.rows <- vector("numeric")
for(row in 1:geno.dim[1]){
n.NA <- sum(is.na(genotype[row,]))
if((row.mcr < 1 & n.NA/geno.dim[2] > row.mcr) |
(row.mcr == 1 & n.NA/geno.dim[2] == row.mcr))
removed.rows <- c(removed.rows, row)
}
if(length(removed.rows != 0))
genotype <- genotype[-removed.rows,]
else removed.rows <- NULL
return(list(genotype = genotype, removed.rows = removed.rows,
removed.cols = removed.cols))
}
# library("optparse")
#
# option_list = list(
#     make_option(c("-s", "--snp"), type="character", default=NULL,
#               help="SNPs dataset", metavar="character"),
#     make_option(c("-p", "--phenotype"), type="character",
#               help="Phenotype measurement dataset", metavar="character")
#     make_option(c("-a", "--associd"), type="character",
#               help="UUID of the two files", metavar="character")
# );
#
# opt_parser = OptionParser(option_list=option_list);
# opt = parse_args(opt_parser);
setwd("C:/Users/lenovo/Documents/SrdoFiles/spacio-project/resources/data");
snps <- read.csv('snps_data_min.csv', header = FALSE, sep = ",")
phenotype <- read.csv('pheno_data.csv', header = FALSE, sep = ",")
# Data adjustment
snps.pos <- snps[(snps$V1 %in% c("chr", "pos")),]
snps.col <- snps[(snps$V1 %in% c("Type")),]
snps <- snps[!(snps$V1 %in% c("chr", "pos", "Type")),]
colnames(snps) <- unlist(snps.col[1,])
colnames(snps.pos) <- unlist(snps.col[1,])
phenotype.col <- phenotype[(phenotype$V1 %in% c("Type")),]
phenotype <- phenotype[!(phenotype$V1 %in% c("Type")),]
colnames(phenotype) <- unlist(phenotype.col[1,])
data <- cbind(snps, Phenotype=phenotype[,2])
# Removing missing values
data.ms <- toNA(data, "--", 1, 2:ncol(snps), ncol(data))
data.type <- data.ms$type
data.geno <- data.ms$genotype
data.pheno <- data.ms$phenotype
ori.size <- dim(data.geno)
# Removing poor quality SNPs and Samples
col.mcr <- 0.05 # Removing poor quality SNPs first.
row.mcr <- 0.05 # Followed by removing poor quality samples.
data.mcr <- mc.filter(data.geno, col.mcr, row.mcr)
data.geno <- data.mcr$genotype
if(!is.null(data.mcr$removed.rows)){
data.pheno <- data.pheno[-data.mcr$removed.rows]
data.type <- data.type[-data.mcr$removed.rows]
}
mcr.size <- dim(data.geno)
# Recoding genotype values
data.geno <- scrime::recodeSNPs(data.geno, snp.in.col = TRUE)
data.geno <- as.data.frame(data.geno)
col.name <- names(data.geno)
data.geno[,col.name] <- lapply(data.coba[,col.name],factor)
##################################################################
#        SNP Selection using Random Forest, SFFS, and SVR        #
#                    Dani Setiawan G651150281                    #
##################################################################
# Please install the following packages before running this code!
# scrime, kernlab, randomForest, doParallel, gtools
##################################################################
# Missing symbol replacement
toNA <- function(data, missing.symbol,
type.col.id, geno.col.id, pheno.col.id){
if(!is.data.frame(data)) data <- as.data.frame(data)
type <- data[,type.col.id]
phenotype <- data[,pheno.col.id]
genotype <- as.matrix(data)[,geno.col.id]
genotype[which(genotype == missing.symbol)] <- NA
return(list(type = type, phenotype = phenotype,
genotype = as.data.frame(genotype)))
}
##################################################################
# Missing call filter
mc.filter <- function(genotype, col.mcr, row.mcr){
if(col.mcr < 0 | row.mcr < 0 | 1 < col.mcr | 1 < row.mcr)
stop(message("Missing call rate must be [0, 1]!"))
geno.dim <- dim(genotype)
removed.cols <- vector("numeric")
for(col in 1:geno.dim[2]){
n.NA <- sum(is.na(genotype[,col]))
if((col.mcr < 1 & n.NA/geno.dim[1] > col.mcr) |
(col.mcr == 1 & n.NA/geno.dim[1] == col.mcr))
removed.cols <- c(removed.cols, col)
}
if(length(removed.cols != 0)){
genotype <- genotype[,-removed.cols]
geno.dim <- dim(genotype)
}
else removed.cols <- NULL
removed.rows <- vector("numeric")
for(row in 1:geno.dim[1]){
n.NA <- sum(is.na(genotype[row,]))
if((row.mcr < 1 & n.NA/geno.dim[2] > row.mcr) |
(row.mcr == 1 & n.NA/geno.dim[2] == row.mcr))
removed.rows <- c(removed.rows, row)
}
if(length(removed.rows != 0))
genotype <- genotype[-removed.rows,]
else removed.rows <- NULL
return(list(genotype = genotype, removed.rows = removed.rows,
removed.cols = removed.cols))
}
# library("optparse")
#
# option_list = list(
#     make_option(c("-s", "--snp"), type="character", default=NULL,
#               help="SNPs dataset", metavar="character"),
#     make_option(c("-p", "--phenotype"), type="character",
#               help="Phenotype measurement dataset", metavar="character")
#     make_option(c("-a", "--associd"), type="character",
#               help="UUID of the two files", metavar="character")
# );
#
# opt_parser = OptionParser(option_list=option_list);
# opt = parse_args(opt_parser);
setwd("C:/Users/lenovo/Documents/SrdoFiles/spacio-project/resources/data");
snps <- read.csv('snps_data_min.csv', header = FALSE, sep = ",")
phenotype <- read.csv('pheno_data.csv', header = FALSE, sep = ",")
# Data adjustment
snps.pos <- snps[(snps$V1 %in% c("chr", "pos")),]
snps.col <- snps[(snps$V1 %in% c("Type")),]
snps <- snps[!(snps$V1 %in% c("chr", "pos", "Type")),]
colnames(snps) <- unlist(snps.col[1,])
colnames(snps.pos) <- unlist(snps.col[1,])
phenotype.col <- phenotype[(phenotype$V1 %in% c("Type")),]
phenotype <- phenotype[!(phenotype$V1 %in% c("Type")),]
colnames(phenotype) <- unlist(phenotype.col[1,])
data <- cbind(snps, Phenotype=phenotype[,2])
# Removing missing values
data.ms <- toNA(data, "--", 1, 2:ncol(snps), ncol(data))
data.type <- data.ms$type
data.geno <- data.ms$genotype
data.pheno <- data.ms$phenotype
ori.size <- dim(data.geno)
# Removing poor quality SNPs and Samples
col.mcr <- 0.05 # Removing poor quality SNPs first.
row.mcr <- 0.05 # Followed by removing poor quality samples.
data.mcr <- mc.filter(data.geno, col.mcr, row.mcr)
data.geno <- data.mcr$genotype
if(!is.null(data.mcr$removed.rows)){
data.pheno <- data.pheno[-data.mcr$removed.rows]
data.type <- data.type[-data.mcr$removed.rows]
}
mcr.size <- dim(data.geno)
# Recoding genotype values
data.geno <- scrime::recodeSNPs(data.geno, snp.in.col = TRUE)
data.geno <- as.data.frame(data.geno)
col.name <- names(data.geno)
data.geno[,col.name] <- lapply(data.geno[,col.name],factor)
##################################################################
#        SNP Selection using Random Forest, SFFS, and SVR        #
#                    Dani Setiawan G651150281                    #
##################################################################
# Please install the following packages before running this code!
# scrime, kernlab, randomForest, doParallel, gtools
##################################################################
# Missing symbol replacement
toNA <- function(data, missing.symbol,
type.col.id, geno.col.id, pheno.col.id){
if(!is.data.frame(data)) data <- as.data.frame(data)
type <- data[,type.col.id]
phenotype <- data[,pheno.col.id]
genotype <- as.matrix(data)[,geno.col.id]
genotype[which(genotype == missing.symbol)] <- NA
return(list(type = type, phenotype = phenotype,
genotype = as.data.frame(genotype)))
}
##################################################################
# Missing call filter
mc.filter <- function(genotype, col.mcr, row.mcr){
if(col.mcr < 0 | row.mcr < 0 | 1 < col.mcr | 1 < row.mcr)
stop(message("Missing call rate must be [0, 1]!"))
geno.dim <- dim(genotype)
removed.cols <- vector("numeric")
for(col in 1:geno.dim[2]){
n.NA <- sum(is.na(genotype[,col]))
if((col.mcr < 1 & n.NA/geno.dim[1] > col.mcr) |
(col.mcr == 1 & n.NA/geno.dim[1] == col.mcr))
removed.cols <- c(removed.cols, col)
}
if(length(removed.cols != 0)){
genotype <- genotype[,-removed.cols]
geno.dim <- dim(genotype)
}
else removed.cols <- NULL
removed.rows <- vector("numeric")
for(row in 1:geno.dim[1]){
n.NA <- sum(is.na(genotype[row,]))
if((row.mcr < 1 & n.NA/geno.dim[2] > row.mcr) |
(row.mcr == 1 & n.NA/geno.dim[2] == row.mcr))
removed.rows <- c(removed.rows, row)
}
if(length(removed.rows != 0))
genotype <- genotype[-removed.rows,]
else removed.rows <- NULL
return(list(genotype = genotype, removed.rows = removed.rows,
removed.cols = removed.cols))
}
# library("optparse")
#
# option_list = list(
#     make_option(c("-s", "--snp"), type="character", default=NULL,
#               help="SNPs dataset", metavar="character"),
#     make_option(c("-p", "--phenotype"), type="character",
#               help="Phenotype measurement dataset", metavar="character")
#     make_option(c("-a", "--associd"), type="character",
#               help="UUID of the two files", metavar="character")
# );
#
# opt_parser = OptionParser(option_list=option_list);
# opt = parse_args(opt_parser);
setwd("C:/Users/lenovo/Documents/SrdoFiles/spacio-project/resources/data");
snps <- read.csv('snps_data_min.csv', header = FALSE, sep = ",")
phenotype <- read.csv('pheno_data.csv', header = FALSE, sep = ",")
# Data adjustment
snps.pos <- snps[(snps$V1 %in% c("chr", "pos")),]
snps.col <- snps[(snps$V1 %in% c("Type")),]
snps <- snps[!(snps$V1 %in% c("chr", "pos", "Type")),]
colnames(snps) <- unlist(snps.col[1,])
colnames(snps.pos) <- unlist(snps.col[1,])
phenotype.col <- phenotype[(phenotype$V1 %in% c("Type")),]
phenotype <- phenotype[!(phenotype$V1 %in% c("Type")),]
colnames(phenotype) <- unlist(phenotype.col[1,])
data <- cbind(snps, Phenotype=phenotype[,2])
# Removing missing values
data.ms <- toNA(data, "--", 1, 2:ncol(snps), ncol(data))
data.type <- data.ms$type
data.geno <- data.ms$genotype
data.pheno <- data.ms$phenotype
ori.size <- dim(data.geno)
# Removing poor quality SNPs and Samples
col.mcr <- 0.05 # Removing poor quality SNPs first.
row.mcr <- 0.05 # Followed by removing poor quality samples.
data.mcr <- mc.filter(data.geno, col.mcr, row.mcr)
data.geno <- data.mcr$genotype
if(!is.null(data.mcr$removed.rows)){
data.pheno <- data.pheno[-data.mcr$removed.rows]
data.type <- data.type[-data.mcr$removed.rows]
}
mcr.size <- dim(data.geno)
# Recoding genotype values
data.geno <- scrime::recodeSNPs(data.geno, snp.in.col = TRUE)
data.geno <- as.data.frame(data.geno)
col.name <- names(data.geno)
data.geno[,col.name] <- lapply(data.geno[,col.name],factor)
# Removing monomorphic SNPs
data.mono <- scrime::identifyMonomorphism(t(data.geno))
if(length(data.mono) != 0)
data.geno <- data.geno[,-data.mono]
poly.size <- dim(data.geno)
# Removing SNPs with Low MAF
data.maf <- scrime::rowMAFs(t(data.geno))
maf <- 0.01 # SNPs with MAFs below this threshold are removed.
low.maf <- which(data.maf < maf)
if(length(low.maf != 0))
data.geno <- data.geno[,-low.maf]
maf.size <- dim(data.geno)
# Imputing missing values
# data.geno <- lapply(as.data.frame(data.geno), factor)
data.geno <- scrime::knncatimpute(data.geno, "cohen", nn = 120)
##################################################################
#        SNP Selection using Random Forest, SFFS, and SVR        #
#                    Dani Setiawan G651150281                    #
##################################################################
# Please install the following packages before running this code!
# scrime, kernlab, randomForest, doParallel, gtools
##################################################################
# Missing symbol replacement
toNA <- function(data, missing.symbol,
type.col.id, geno.col.id, pheno.col.id){
if(!is.data.frame(data)) data <- as.data.frame(data)
type <- data[,type.col.id]
phenotype <- data[,pheno.col.id]
genotype <- as.matrix(data)[,geno.col.id]
genotype[which(genotype == missing.symbol)] <- NA
return(list(type = type, phenotype = phenotype,
genotype = as.data.frame(genotype)))
}
##################################################################
# Missing call filter
mc.filter <- function(genotype, col.mcr, row.mcr){
if(col.mcr < 0 | row.mcr < 0 | 1 < col.mcr | 1 < row.mcr)
stop(message("Missing call rate must be [0, 1]!"))
geno.dim <- dim(genotype)
removed.cols <- vector("numeric")
for(col in 1:geno.dim[2]){
n.NA <- sum(is.na(genotype[,col]))
if((col.mcr < 1 & n.NA/geno.dim[1] > col.mcr) |
(col.mcr == 1 & n.NA/geno.dim[1] == col.mcr))
removed.cols <- c(removed.cols, col)
}
if(length(removed.cols != 0)){
genotype <- genotype[,-removed.cols]
geno.dim <- dim(genotype)
}
else removed.cols <- NULL
removed.rows <- vector("numeric")
for(row in 1:geno.dim[1]){
n.NA <- sum(is.na(genotype[row,]))
if((row.mcr < 1 & n.NA/geno.dim[2] > row.mcr) |
(row.mcr == 1 & n.NA/geno.dim[2] == row.mcr))
removed.rows <- c(removed.rows, row)
}
if(length(removed.rows != 0))
genotype <- genotype[-removed.rows,]
else removed.rows <- NULL
return(list(genotype = genotype, removed.rows = removed.rows,
removed.cols = removed.cols))
}
# library("optparse")
#
# option_list = list(
#     make_option(c("-s", "--snp"), type="character", default=NULL,
#               help="SNPs dataset", metavar="character"),
#     make_option(c("-p", "--phenotype"), type="character",
#               help="Phenotype measurement dataset", metavar="character")
#     make_option(c("-a", "--associd"), type="character",
#               help="UUID of the two files", metavar="character")
# );
#
# opt_parser = OptionParser(option_list=option_list);
# opt = parse_args(opt_parser);
setwd("C:/Users/lenovo/Documents/SrdoFiles/spacio-project/resources/data");
snps <- read.csv('snps_data_min.csv', header = FALSE, sep = ",")
phenotype <- read.csv('pheno_data.csv', header = FALSE, sep = ",")
# Data adjustment
snps.pos <- snps[(snps$V1 %in% c("chr", "pos")),]
snps.col <- snps[(snps$V1 %in% c("Type")),]
snps <- snps[!(snps$V1 %in% c("chr", "pos", "Type")),]
colnames(snps) <- unlist(snps.col[1,])
colnames(snps.pos) <- unlist(snps.col[1,])
phenotype.col <- phenotype[(phenotype$V1 %in% c("Type")),]
phenotype <- phenotype[!(phenotype$V1 %in% c("Type")),]
colnames(phenotype) <- unlist(phenotype.col[1,])
data <- cbind(snps, Phenotype=phenotype[,2])
# Removing missing values
data.ms <- toNA(data, "--", 1, 2:ncol(snps), ncol(data))
data.type <- data.ms$type
data.geno <- data.ms$genotype
data.pheno <- data.ms$phenotype
ori.size <- dim(data.geno)
# Removing poor quality SNPs and Samples
col.mcr <- 0.05 # Removing poor quality SNPs first.
row.mcr <- 0.05 # Followed by removing poor quality samples.
data.mcr <- mc.filter(data.geno, col.mcr, row.mcr)
data.geno <- data.mcr$genotype
if(!is.null(data.mcr$removed.rows)){
data.pheno <- data.pheno[-data.mcr$removed.rows]
data.type <- data.type[-data.mcr$removed.rows]
}
mcr.size <- dim(data.geno)
# Recoding genotype values
data.geno <- scrime::recodeSNPs(data.geno, snp.in.col = TRUE)
rowSums(data.geno==1,na.rm=TRUE)==n
rowSums(!is.na(data.geno))
n <- rowSums(!is.na(data.geno))
rowSums(data.geno==1,na.rm=TRUE)==n
rs <- rowSums(data.geno==1,na.rm=TRUE)==n
any(rs)
##################################################################
#        SNP Selection using Random Forest, SFFS, and SVR        #
#                    Dani Setiawan G651150281                    #
##################################################################
# Please install the following packages before running this code!
# scrime, kernlab, randomForest, doParallel, gtools
##################################################################
# Missing symbol replacement
toNA <- function(data, missing.symbol,
type.col.id, geno.col.id, pheno.col.id){
if(!is.data.frame(data)) data <- as.data.frame(data)
type <- data[,type.col.id]
phenotype <- data[,pheno.col.id]
genotype <- as.matrix(data)[,geno.col.id]
genotype[which(genotype == missing.symbol)] <- NA
return(list(type = type, phenotype = phenotype,
genotype = as.data.frame(genotype)))
}
##################################################################
# Missing call filter
mc.filter <- function(genotype, col.mcr, row.mcr){
if(col.mcr < 0 | row.mcr < 0 | 1 < col.mcr | 1 < row.mcr)
stop(message("Missing call rate must be [0, 1]!"))
geno.dim <- dim(genotype)
removed.cols <- vector("numeric")
for(col in 1:geno.dim[2]){
n.NA <- sum(is.na(genotype[,col]))
if((col.mcr < 1 & n.NA/geno.dim[1] > col.mcr) |
(col.mcr == 1 & n.NA/geno.dim[1] == col.mcr))
removed.cols <- c(removed.cols, col)
}
if(length(removed.cols != 0)){
genotype <- genotype[,-removed.cols]
geno.dim <- dim(genotype)
}
else removed.cols <- NULL
removed.rows <- vector("numeric")
for(row in 1:geno.dim[1]){
n.NA <- sum(is.na(genotype[row,]))
if((row.mcr < 1 & n.NA/geno.dim[2] > row.mcr) |
(row.mcr == 1 & n.NA/geno.dim[2] == row.mcr))
removed.rows <- c(removed.rows, row)
}
if(length(removed.rows != 0))
genotype <- genotype[-removed.rows,]
else removed.rows <- NULL
return(list(genotype = genotype, removed.rows = removed.rows,
removed.cols = removed.cols))
}
# library("optparse")
#
# option_list = list(
#     make_option(c("-s", "--snp"), type="character", default=NULL,
#               help="SNPs dataset", metavar="character"),
#     make_option(c("-p", "--phenotype"), type="character",
#               help="Phenotype measurement dataset", metavar="character")
#     make_option(c("-a", "--associd"), type="character",
#               help="UUID of the two files", metavar="character")
# );
#
# opt_parser = OptionParser(option_list=option_list);
# opt = parse_args(opt_parser);
setwd("C:/Users/lenovo/Documents/SrdoFiles/spacio-project/resources/data");
snps <- read.csv('snps_data.csv', header = FALSE, sep = ",")
phenotype <- read.csv('pheno_data.csv', header = FALSE, sep = ",")
# Data adjustment
snps.pos <- snps[(snps$V1 %in% c("chr", "pos")),]
snps.col <- snps[(snps$V1 %in% c("Type")),]
snps <- snps[!(snps$V1 %in% c("chr", "pos", "Type")),]
colnames(snps) <- unlist(snps.col[1,])
colnames(snps.pos) <- unlist(snps.col[1,])
phenotype.col <- phenotype[(phenotype$V1 %in% c("Type")),]
phenotype <- phenotype[!(phenotype$V1 %in% c("Type")),]
colnames(phenotype) <- unlist(phenotype.col[1,])
data <- cbind(snps, Phenotype=phenotype[,2])
# Removing missing values
data.ms <- toNA(data, "--", 1, 2:ncol(snps), ncol(data))
data.type <- data.ms$type
data.geno <- data.ms$genotype
data.pheno <- data.ms$phenotype
ori.size <- dim(data.geno)
# Removing poor quality SNPs and Samples
col.mcr <- 0.05 # Removing poor quality SNPs first.
row.mcr <- 0.05 # Followed by removing poor quality samples.
data.mcr <- mc.filter(data.geno, col.mcr, row.mcr)
data.geno <- data.mcr$genotype
if(!is.null(data.mcr$removed.rows)){
data.pheno <- data.pheno[-data.mcr$removed.rows]
data.type <- data.type[-data.mcr$removed.rows]
}
mcr.size <- dim(data.geno)
# Recoding genotype values
data.geno <- scrime::recodeSNPs(data.geno, snp.in.col = TRUE)
source('~/SrdoFiles/spacio-project/resources/codes/dani.R', echo=TRUE)
detach("package:scrime", unload=TRUE)
source('~/SrdoFiles/spacio-project/resources/codes/dani.R', echo=TRUE)
